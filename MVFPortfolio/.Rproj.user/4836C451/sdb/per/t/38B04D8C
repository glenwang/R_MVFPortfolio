{
    "collab_server" : "",
    "contents" : "if(!require(IntroCompFinR)){\n  install.packages(\"IntroCompFinR\", repos=\"http://R-Forge.R-project.org\")\n  library(IntroCompFinR)\n}\n\nif(!require(quantmod)){\n  install.packages(\"quantmod\")\n  library(quantmod)\n}\n\nif(!require(PerformanceAnalytics)){\n  install.packages(\"PerformanceAnalytics\")\n  library(PerformanceAnalytics)\n}\n\nif(!require(tibble)){\n  install.packages(\"tibble\")\n  library(tibble)\n}\n\nAdjustedPrice= function(symbol_list, fromtime, sourc){\n  library(quantmod)\n  dataset=xts()\n  for(i in symbol_list) {\n    cat(\"Downloading time series for symbol '\", i, \"' ...\\n\",\n        sep = \"\")\n    status <- tryCatch(getSymbols(i, src = sourc,\n                                  from = as.Date(fromtime)),\n                       error = identity)\n    if (grepl(\"-\", i)){\n      idata = eval(parse(text = paste(\"`\", i, \"`\", sep = \"\")))\n      i = gsub(\"-\", \".\", i)\n      colnames(idata) = gsub(\"-\", \".\", colnames(idata))\n      cat(\"Replacing dash in\", i, sep = \" \")\n      assign(i, idata)\n      #return(eval(parse(text = i)))\n    }\n    adj= paste(i,\"$\",i,\".Adjusted\", sep = \"\")\n    print(paste(\"Merging\", adj, sep = \" \"))\n    dataset <- merge(dataset, eval(parse(text = adj)))\n    if(inherits(status, \"error\"))\n      cat(\"Symbol '\", i, \"' not downloadable!\\n\", sep = \"\")\n  }\n  names(dataset) = c(symbol_list)\n  colnames(dataset) = gsub(\"-\", \".\", colnames(dataset))\n  return(dataset)\n}\n\nPrice = function(symbol_list, fromtime, sourc, colmn){\n  library(quantmod)\n  dataset=xts()\n  for(i in symbol_list) {\n    cat(\"Downloading time series for symbol '\", i, \"' ...\\n\",\n        sep = \"\")\n    status <- tryCatch(getSymbols(i, src = sourc,\n                                  from = as.Date(fromtime)),\n                       error = identity)\n    if (grepl(\"-\", i)){\n      idata = eval(parse(text = paste(\"`\", i, \"`\", sep = \"\")))\n      i = gsub(\"-\", \".\", i)\n      colnames(idata) = gsub(\"-\", \".\", colnames(idata))\n      cat(\"Replacing dash in\", i, sep = \" \")\n      assign(i, idata)\n      #return(eval(parse(text = i)))\n    }\n    adj= paste(i,\"$\",i,\".\", colmn, sep = \"\")\n    print(paste(\"Merging\", adj, sep = \" \"))\n    dataset <- merge(dataset, eval(parse(text = adj)))\n    if(inherits(status, \"error\"))\n      cat(\"Symbol '\", i, \"' not downloadable!\\n\", sep = \"\")\n  }\n  names(dataset) = c(symbol_list)\n  colnames(dataset) = gsub(\"-\", \".\", colnames(dataset))\n  return(dataset)\n}\n\n##TBD\n\nAnnualExpectedReturn = function(adjustedprice_dataset){\n  library(PerformanceAnalytics)\n  returns=xts()\n  returns = (Return.calculate(adjustedprice_dataset))\n  means=Return.annualized(returns)\n  means = t(means)\n  AnnualMeans = data.matrix(means)\n  return(AnnualMeans)\n}\n\nAnnualReturnRisk = function(adjustedprice_dataset){\n  library(PerformanceAnalytics)\n  returns=xts()\n  ReturnRisk=xts()\n  returns = (Return.calculate(adjustedprice_dataset))\n  means=Return.annualized(returns)\n  annaulStd= StdDev.annualized(returns)\n  Means = t(means)\n  AnnualMeans = data.matrix(Means)\n  annStd = t(annaulStd)\n  AnnualStd= data.matrix(annStd)\n  plot(AnnualStd, AnnualMeans, main = \"Securities Performances\")\n  text(AnnualStd, AnnualMeans, labels=rownames(AnnualStd), cex= 0.7, pos=3)\n  ReturnRisk=data.frame(AnnualMeans,AnnualStd)\n  names(ReturnRisk) = c(\"Return\",\"Std\")\n  return(ReturnRisk)\n}\n#######\n\nCorrMatrix = function (adjustedprice_dataset){\n  corr_matrix=xts()\n  returns = Return.calculate(adjustedprice_dataset)\n  #returns = data.frame(diff(as.matrix(log(adjustedprice_dataset))))\n  corr_matrix=data.frame(cor(returns,use = \"complete.obs\"))\n  return(corr_matrix)\n}\n\nRSTDCorr = function (adjustedprice_dataset){\n  inrr = AnnualReturnRisk(adjustedprice_dataset)\n  incorr = CorrMatrix(adjustedprice_dataset)\n  rstdcorrtable = cbind(inrr, incorr)\n  return(rstdcorrtable)\n}\n\nCovMatrix = function(adjustedprice_dataset){\n  cov_matrix =xts()\n  returns = Return.calculate(adjustedprice_dataset)\n  #returns = data.frame(diff(as.matrix(log(adjustedprice_dataset))))\n  cov_matrix=data.frame(cov(returns, use = \"complete.obs\"))\n  return(cov_matrix)\n}\n\nRRCorCov = function(adjustedprice_dataset){\n  aRR <- AnnualReturnRisk(adjustedprice_dataset)\n  assign(paste(deparse(substitute(adjustedprice_dataset)), \"RR\", sep = \".\"), aRR, envir = .GlobalEnv)\n  RRCor <- RSTDCorr(adjustedprice_dataset)\n  assign(paste(deparse(substitute(adjustedprice_dataset)), \"RRCor\", sep = \".\"), RRCor, envir = .GlobalEnv)\n  Cov <- CovMatrix(adjustedprice_dataset)\n  assign(paste(deparse(substitute(adjustedprice_dataset)), \"Cov\", sep = \".\"), Cov, envir = .GlobalEnv)\n}\n\n######\nRSTDWtable = function(adjustedprice_dataset, target.returnlist, r.free){\n  library(tibble)\n  library(IntroCompFinR)\n  symbols = colnames(adjustedprice_dataset)\n  covmtri =CovMatrix(adjustedprice_dataset)\n  annuerMatrix = AnnualExpectedReturn(adjustedprice_dataset)\n  annuer = c(annuerMatrix)\n  names(annuer)= c(symbols)\n  outputtable = xts()\n  for (i in target.returnlist){\n    efpf = efficient.portfolio(annuer, covmtri, i, shorts=FALSE)\n    a =data.frame(t(data.matrix(unlist(summary(efpf, risk.free=r.free)))))\n    a = a[,-1]\n    rstd = a[,1:2]\n    names(rstd) = c(\"Target_Return\",\"Std\")\n    rstd = data.matrix(rstd)\n    weights = a[,-c(1:2)]\n    names(weights) = colnames(adjustedprice_dataset)\n    weights = data.matrix(weights)\n    outputrow = data.frame(cbind(rstd,weights))\n    #print(outputrow)\n    outputtable = data.frame(rbind(outputtable,outputrow))\n    plot(efpf, col=\"blue\" )\n    mtext(paste(\"Target Return =\",i, sep = \" \"))\n  }\n  nuReturn =as.numeric(outputtable$Target_Return)\n  nuStd =as.numeric(outputtable$Std)\n  Sharpe = (nuReturn-r.free)/nuStd\n  Sharpe = data.matrix(Sharpe)\n  firsttwo = data.matrix(outputtable[,1:2])\n  latters = data.matrix(outputtable[,-c(1:2)])\n  newColum= data.frame(cbind(firsttwo,Sharpe))\n  foutput =data.frame(cbind(newColum, latters))\n  colnames(foutput)[3] <- \"Sharpe\"\n  return(foutput)\n}\n\nefplot = function (rstdwtable){\n  plot(rstdwtable$Std, rstdwtable$Target_Return, ylab=names(rstdwtable)[1], type = \"o\", xlab=names(rstdwtable)[2],\n       main = paste(\"Efficient Frontier\", deparse(substitute(rstdwtable)), sep = \" \"))\n  text(rstdwtable$Std, rstdwtable$Target_Return, labels=rstdwtable$Target_Return, cex= 0.7, pos=4)\n  }\n\n",
    "created" : 1528943279892.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "730527696",
    "id" : "38B04D8C",
    "lastKnownWriteTime" : 1529095404,
    "last_content_update" : 1529095404,
    "path" : "~/Documents/R Finance/MVFPortfolio package/MVFPortfolio/R/Allocation.R",
    "project_path" : "R/Allocation.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}