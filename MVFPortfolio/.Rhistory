a = a[,-1]
rstd = a[,1:2]
names(rstd) = c("Target_Return","Std")
rstd = data.matrix(rstd)
weights = a[,-c(1:2)]
names(weights) = colnames(adjustedprice_dataset)
weights = data.matrix(weights)
outputrow = data.frame(cbind(rstd,weights))
#print(outputrow)
outputtable = data.frame(rbind(outputtable,outputrow))
plot(efpf, col="blue" )
mtext(paste("Target Return =",i, sep = " "))
}
nuReturn =as.numeric(outputtable$Target_Return)
nuStd =as.numeric(outputtable$Std)
Sharpe = (nuReturn-r.free)/nuStd
Sharpe = data.matrix(Sharpe)
firsttwo = data.matrix(outputtable[,1:2])
latters = data.matrix(outputtable[,-c(1:2)])
newColum= data.frame(cbind(firsttwo,Sharpe))
foutput =data.frame(cbind(newColum, latters))
colnames(foutput)[3] <- "Sharpe"
return(foutput)
}
efplot = function (rstdwtable){
plot(rstdwtable$Std, rstdwtable$Target_Return, ylab=names(rstdwtable)[1], xlab=names(rstdwtable)[2],
main = paste("Efficient Frontier", deparse(substitute(rstdwtable)), sep = " "))
lines(rstdwtable$Std[order(rstdwtable$Std)], rstdwtable$Target_Return[order(rstdwtable$Std)], pch=16)
}
# compute efficient portfolio subject to target return with no short sales
#library(MVFPortfolio)
begindate = "2015-06-08"
sourc ="yahoo"
symbols =list('VTI','VO','VB','SHY','BND', 'TLT', 'TIP','MUB','VEU','VSS','VWO','VNQ','DBC','GLD')
assets = AdjustedPrice(symbols, begindate, sourc)
rrisk = AnnualReturnRisk(assets)
rstdcorr = RSTDCorr(assets)
CovM =CovMatrix(assets)
target.returnlist = c(.04, .05,.06, 0.0639569892, .07,.08,.09,.1, .11, .12)
riskfree= .0293
rsw20152 = RSTDWtable(assets, target.returnlist, riskfree)
rsw2015plot = efplot(rsw20152)
#library(xlsx)
#write.xlsx(rsw2015, "/Users/Glen/Documents/11 Advanced Portfolio Management/Project/Allocation/weights.xlsx")
#write.table(arr, file="arr.csv",sep=",",row.names=F)
if(!require(IntroCompFinR)){
install.packages("IntroCompFinR")
library(IntroCompFinR)
}
if(!require(quantmod)){
install.packages("quantmod")
library(quantmod)
}
if(!require(PerformanceAnalytics)){
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
}
if(!require(tibble)){
install.packages("tibble")
library(tibble)
}
AdjustedPrice= function(symbol_list, fromtime, sourc){
library(quantmod)
dataset=xts()
for(i in symbol_list) {
cat("Downloading time series for symbol '", i, "' ...\n",
sep = "")
status <- tryCatch(getSymbols(i, src = sourc,
from = as.Date(fromtime)),
error = identity)
adj= paste(i,"$",i,".Adjusted", sep = "")
print(paste("Merging", adj, sep = " "))
dataset <- merge(dataset, eval(parse(text = adj)))
if(inherits(status, "error"))
cat("Symbol '", i, "' not downloadable!\n", sep = "")
}
names(dataset) = c(symbol_list)
return(dataset)
}
IssueAdjustedPrice = function(symbol_list, fromtime, totime, sourc){
library(quantmod)
dataset=xts()
for(i in symbol_list) {
cat("Downloading time series for symbol '", i, "' ...\n",
sep = "")
status <- tryCatch(getSymbols(i, src = sourc,
from = as.Date(fromtime),
to = as.Date(totime)),
error = identity)
adj= paste(i,"$",i,".Adjusted", sep = "")
cat("Merging", adj, sep = " ")
dataset <- merge(dataset, eval(parse(text = adj)))
if(inherits(status, "error"))
cat("Symbol '", i, "' not downloadable!\n", sep = "")
}
names(dataset) = c(symbol_list)
return(dataset)
}
AnnualExpectedReturn = function(adjustedprice_dataset){
library(PerformanceAnalytics)
returns=xts()
returns = (Return.calculate(adjustedprice_dataset))
means=Return.annualized(returns)
means = t(means)
AnnualMeans = data.matrix(means)
return(AnnualMeans)
}
AnnualReturnRisk = function(adjustedprice_dataset){
library(PerformanceAnalytics)
returns=xts()
ReturnRisk=xts()
returns = (Return.calculate(adjustedprice_dataset))
means=Return.annualized(returns)
annaulStd= StdDev.annualized(returns)
Means = t(means)
AnnualMeans = data.matrix(Means)
annStd = t(annaulStd)
AnnualStd= data.matrix(annStd)
plot(AnnualStd, AnnualMeans, main = "Securities Performances")
text(AnnualStd, AnnualMeans, labels=rownames(AnnualStd), cex= 0.7, pos=3)
ReturnRisk=data.frame(AnnualMeans,AnnualStd)
names(ReturnRisk) = c("Return","Std")
return(ReturnRisk)
}
#######
CorrMatrix = function (adjustedprice_dataset){
corr_matrix=xts()
returns = Return.calculate(adjustedprice_dataset)
#returns = data.frame(diff(as.matrix(log(adjustedprice_dataset))))
corr_matrix=data.frame(cor(returns,use = "complete.obs"))
return(corr_matrix)
}
RSTDCorr = function (adjustedprice_dataset){
inrr = AnnualReturnRisk(adjustedprice_dataset)
incorr = CorrMatrix(adjustedprice_dataset)
rstdcorrtable = cbind(inrr, incorr)
return(rstdcorrtable)
}
CovMatrix = function(adjustedprice_dataset){
cov_matrix =xts()
returns = Return.calculate(adjustedprice_dataset)
#returns = data.frame(diff(as.matrix(log(adjustedprice_dataset))))
cov_matrix=data.frame(cov(returns, use = "complete.obs"))
return(cov_matrix)
}
######
RSTDWtable = function(adjustedprice_dataset, target.returnlist, r.free){
library(tibble)
library(IntroCompFinR)
covmtri =CovMatrix(adjustedprice_dataset)
annuerMatrix = AnnualExpectedReturn(adjustedprice_dataset)
annuer = c(annuerMatrix)
names(annuer)= c(symbols)
outputtable = xts()
for (i in target.returnlist){
efpf = efficient.portfolio(annuer, covmtri, i, shorts=FALSE)
a =data.frame(t(data.matrix(unlist(summary(efpf, risk.free=r.free)))))
a = a[,-1]
rstd = a[,1:2]
names(rstd) = c("Target_Return","Std")
rstd = data.matrix(rstd)
weights = a[,-c(1:2)]
names(weights) = colnames(adjustedprice_dataset)
weights = data.matrix(weights)
outputrow = data.frame(cbind(rstd,weights))
#print(outputrow)
outputtable = data.frame(rbind(outputtable,outputrow))
plot(efpf, col="blue" )
mtext(paste("Target Return =",i, sep = " "))
}
nuReturn =as.numeric(outputtable$Target_Return)
nuStd =as.numeric(outputtable$Std)
Sharpe = (nuReturn-r.free)/nuStd
Sharpe = data.matrix(Sharpe)
firsttwo = data.matrix(outputtable[,1:2])
latters = data.matrix(outputtable[,-c(1:2)])
newColum= data.frame(cbind(firsttwo,Sharpe))
foutput =data.frame(cbind(newColum, latters))
colnames(foutput)[3] <- "Sharpe"
return(foutput)
}
efplot = function (rstdwtable){
plot(rstdwtable$Std, rstdwtable$Target_Return, ylab=names(rstdwtable)[1], xlab=names(rstdwtable)[2],
main = paste("Efficient Frontier", deparse(substitute(rstdwtable)), sep = " "))
lines(rstdwtable$Std[order(rstdwtable$Std)], rstdwtable$Target_Return[order(rstdwtable$Std)], pch=16)
}
begindate = "2015-06-08"
sourc ="yahoo"
symbols =list('VTI','VO','VB','SHY','BND', 'TLT', 'TIP','MUB','VEU','VSS','VWO','VNQ','DBC','GLD')
assets = AdjustedPrice(symbols, begindate, sourc)
library(MVFPortfolio)
library(MVFPortfolio)
begindate = "2015-06-08"
sourc ="yahoo"
symbols =list('VTI','VO','VB','SHY','BND', 'TLT', 'TIP','MUB','VEU','VSS','VWO','VNQ','DBC','GLD')
assets = AdjustedPrice(symbols, begindate, sourc)
rrisk = AnnualReturnRisk(assets)
rstdcorr = RSTDCorr(assets)
CovM =CovMatrix(assets)
target.returnlist = c(.04, .05,.06, 0.0639569892, .07,.08,.09,.1, .11, .12)
riskfree= .0293
rsw20152 = RSTDWtable(assets, target.returnlist, riskfree)
rsw2015plot = efplot(rsw20152)
library(MVFPortfolio)
library(readr)
sp486 <- read_csv("~/Documents/11 Advanced Portfolio Management/Project/sp486withBB.csv")
SP486Symbols = sp486$Ticker
begindate = "2015-07-12"
sourc ="yahoo"
#assetClassSymbols =list('VTI','VO','VB','SHY','BND', 'TLT', 'TIP','MUB','VEU','VSS','VWO','VNQ','DBC','GLD')
sp486data = AdjustedPrice(SP486Symbols, begindate, sourc)
#nasp500data = na.omit(sp491data)
#apply(sp487data, 2, function(x) any(is.na(x)))
write.table(sp486data, file="sp486data.csv",sep=",",row.names=F)
if(!require(IntroCompFinR)){
install.packages("IntroCompFinR")
library(IntroCompFinR)
}
if(!require(quantmod)){
install.packages("quantmod")
library(quantmod)
}
if(!require(PerformanceAnalytics)){
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
}
if(!require(tibble)){
install.packages("tibble")
library(tibble)
}
AdjustedPrice= function(symbol_list, fromtime, sourc){
library(quantmod)
dataset=xts()
for(i in symbol_list) {
cat("Downloading time series for symbol '", i, "' ...\n",
sep = "")
status <- tryCatch(getSymbols(i, src = sourc,
from = as.Date(fromtime)),
error = identity)
if (grepl("-", i)){
idata = eval(parse(text = paste("`", i, "`", sep = "")))
i = gsub("-", ".", i)
print(i)
colnames(idata) = gsub("-", ".", colnames(idata))
assign(i, idata)
#return(eval(parse(text = i)))
}
adj= paste(i,"$",i,".Adjusted", sep = "")
print(paste("Merging", adj, sep = " "))
dataset <- merge(dataset, eval(parse(text = adj)))
if(inherits(status, "error"))
cat("Symbol '", i, "' not downloadable!\n", sep = "")
}
names(dataset) = c(symbol_list)
return(dataset)
}
Price = function(symbol_list, fromtime, sourc, colmn){
library(quantmod)
dataset=xts()
for(i in symbol_list) {
cat("Downloading time series for symbol '", i, "' ...\n",
sep = "")
status <- tryCatch(getSymbols(i, src = sourc,
from = as.Date(fromtime)),
error = identity)
if (grepl("-", i)){
idata = eval(parse(text = paste("`", i, "`", sep = "")))
i = gsub("-", ".", i)
print(i)
colnames(idata) = gsub("-", ".", colnames(idata))
assign(i, idata)
#return(eval(parse(text = i)))
}
adj= paste(i,"$",i,".", colmn, sep = "")
print(paste("Merging", adj, sep = " "))
dataset <- merge(dataset, eval(parse(text = adj)))
if(inherits(status, "error"))
cat("Symbol '", i, "' not downloadable!\n", sep = "")
}
names(dataset) = c(symbol_list)
return(dataset)
}
##TBD
executionTable = function(eqTotalAmount, eq1CornPort, weightsM, sharePricesM){
targetEqSymbols = colnames(eqCornEqPort)[-c(1:3)]
eqTotalAmountM = rep(eqTotalAmountM, nrow(weights)
dollarAmountM = eqTotalAmountM*weightsM
numofShares = dollarAmountM/sharePricesM
table = cbind(targetEqSymbols, weightsM, dollarAmountM, sharePricesM, numofShares)
return(table)
}
AnnualExpectedReturn = function(adjustedprice_dataset){
library(PerformanceAnalytics)
returns=xts()
returns = (Return.calculate(adjustedprice_dataset))
means=Return.annualized(returns)
means = t(means)
AnnualMeans = data.matrix(means)
return(AnnualMeans)
}
AnnualReturnRisk = function(adjustedprice_dataset){
library(PerformanceAnalytics)
returns=xts()
ReturnRisk=xts()
returns = (Return.calculate(adjustedprice_dataset))
means=Return.annualized(returns)
annaulStd= StdDev.annualized(returns)
Means = t(means)
AnnualMeans = data.matrix(Means)
annStd = t(annaulStd)
AnnualStd= data.matrix(annStd)
plot(AnnualStd, AnnualMeans, main = "Securities Performances")
text(AnnualStd, AnnualMeans, labels=rownames(AnnualStd), cex= 0.7, pos=3)
ReturnRisk=data.frame(AnnualMeans,AnnualStd)
names(ReturnRisk) = c("Return","Std")
return(ReturnRisk)
}
#######
CorrMatrix = function (adjustedprice_dataset){
corr_matrix=xts()
returns = Return.calculate(adjustedprice_dataset)
#returns = data.frame(diff(as.matrix(log(adjustedprice_dataset))))
corr_matrix=data.frame(cor(returns,use = "complete.obs"))
return(corr_matrix)
}
RSTDCorr = function (adjustedprice_dataset){
inrr = AnnualReturnRisk(adjustedprice_dataset)
incorr = CorrMatrix(adjustedprice_dataset)
rstdcorrtable = cbind(inrr, incorr)
return(rstdcorrtable)
}
CovMatrix = function(adjustedprice_dataset){
cov_matrix =xts()
returns = Return.calculate(adjustedprice_dataset)
#returns = data.frame(diff(as.matrix(log(adjustedprice_dataset))))
cov_matrix=data.frame(cov(returns, use = "complete.obs"))
return(cov_matrix)
}
######
RSTDWtable = function(adjustedprice_dataset, target.returnlist, r.free){
library(tibble)
library(IntroCompFinR)
covmtri =CovMatrix(adjustedprice_dataset)
annuerMatrix = AnnualExpectedReturn(adjustedprice_dataset)
annuer = c(annuerMatrix)
names(annuer)= c(symbols)
outputtable = xts()
for (i in target.returnlist){
efpf = efficient.portfolio(annuer, covmtri, i, shorts=FALSE)
a =data.frame(t(data.matrix(unlist(summary(efpf, risk.free=r.free)))))
a = a[,-1]
rstd = a[,1:2]
names(rstd) = c("Target_Return","Std")
rstd = data.matrix(rstd)
weights = a[,-c(1:2)]
names(weights) = colnames(adjustedprice_dataset)
weights = data.matrix(weights)
outputrow = data.frame(cbind(rstd,weights))
#print(outputrow)
outputtable = data.frame(rbind(outputtable,outputrow))
plot(efpf, col="blue" )
mtext(paste("Target Return =",i, sep = " "))
}
nuReturn =as.numeric(outputtable$Target_Return)
nuStd =as.numeric(outputtable$Std)
Sharpe = (nuReturn-r.free)/nuStd
Sharpe = data.matrix(Sharpe)
firsttwo = data.matrix(outputtable[,1:2])
latters = data.matrix(outputtable[,-c(1:2)])
newColum= data.frame(cbind(firsttwo,Sharpe))
foutput =data.frame(cbind(newColum, latters))
colnames(foutput)[3] <- "Sharpe"
return(foutput)
}
efplot = function (rstdwtable){
plot(rstdwtable$Std, rstdwtable$Target_Return, ylab=names(rstdwtable)[1], xlab=names(rstdwtable)[2],
main = paste("Efficient Frontier", deparse(substitute(rstdwtable)), sep = " "))
lines(rstdwtable$Std[order(rstdwtable$Std)], rstdwtable$Target_Return[order(rstdwtable$Std)], pch=16)
}
sp486data = AdjustedPrice(SP486Symbols, begindate, sourc)
library(MVFPortfolio)
print(paste("Replacing dash in", i, sep = " ")
print(paste("Replacing dash in", "a", sep = " ")
cat("Replacing dash in", "a", sep = " ")
library(MVFPortfolio)
library(MVFPortfolio)
library(readr)
sp486 <- read_csv("~/Documents/11 Advanced Portfolio Management/Project/sp486withBB.csv")
SP486Symbols = sp486$Ticker
begindate = "2015-07-12"
sourc ="yahoo"
#assetClassSymbols =list('VTI','VO','VB','SHY','BND', 'TLT', 'TIP','MUB','VEU','VSS','VWO','VNQ','DBC','GLD')
sp486data = AdjustedPrice(SP486Symbols, begindate, sourc)
SP486Symbols = sp486$Ticker
library(MVFPortfolio)
library(readr)
sp486 <- read_csv("~/Documents/11 Advanced Portfolio Management/Project/sp486withBB.csv")
SP486Symbols = sp486$Ticker
begindate = "2015-07-12"
sourc ="yahoo"
AdjustedPrice= function(symbol_list, fromtime, sourc){
library(quantmod)
dataset=xts()
for(i in symbol_list) {
cat("Downloading time series for symbol '", i, "' ...\n",
sep = "")
status <- tryCatch(getSymbols(i, src = sourc,
from = as.Date(fromtime)),
error = identity)
if (grepl("-", i)){
idata = eval(parse(text = paste("`", i, "`", sep = "")))
i = gsub("-", ".", i)
colnames(idata) = gsub("-", ".", colnames(idata))
cat("Replacing dash in", i, sep = " ")
assign(i, idata)
#return(eval(parse(text = i)))
}
adj= paste(i,"$",i,".Adjusted", sep = "")
print(paste("Merging", adj, sep = " "))
dataset <- merge(dataset, eval(parse(text = adj)))
if(inherits(status, "error"))
cat("Symbol '", i, "' not downloadable!\n", sep = "")
}
names(dataset) = c(symbol_list)
return(dataset)
}
bbsymbols=c("BRK-B")
begindate = "2015-07-12"
sourc ="yahoo"
BBdata =AdjustedPrice(bbsymbols, begindate, sourc)
library(MVFPortfolio)
library(readr)
BBdata =AdjustedPrice(bbsymbols, begindate, sourc)
View(BBdata)
library(MVFPortfolio)
library(MVFPortfolio)
library(readr)
begindate = "2015-07-12"
sourc ="yahoo"
bbsymbols=c("BRK-B", "BF-B")
class(bbsymbols)
BBdata =AdjustedPrice(bbsymbols, begindate, sourc)
View(BBdata)
library(MVFPortfolio)
library(readr)
sp486 <- read_csv("~/Documents/11 Advanced Portfolio Management/Project/sp486withBB.csv")
SP486Symbols = as.list(sp486$Ticker)
class(SP486Symbols)
#b = c("A", "B", "C")
#class(b)
begindate = "2015-07-12"
sourc ="yahoo"
#assetClassSymbols =list('VTI','VO','VB','SHY','BND', 'TLT', 'TIP','MUB','VEU','VSS','VWO','VNQ','DBC','GLD')
#namesClass = c(assetClassSymbols)
sp486data = AdjustedPrice(SP486Symbols, begindate, sourc)
View(sp486data)
View(sp486data)
AdjustedPrice= function(symbol_list, fromtime, sourc){
library(quantmod)
dataset=xts()
for(i in symbol_list) {
cat("Downloading time series for symbol '", i, "' ...\n",
sep = "")
status <- tryCatch(getSymbols(i, src = sourc,
from = as.Date(fromtime)),
error = identity)
if (grepl("-", i)){
idata = eval(parse(text = paste("`", i, "`", sep = "")))
i = gsub("-", ".", i)
colnames(idata) = gsub("-", ".", colnames(idata))
cat("Replacing dash in", i, sep = " ")
assign(i, idata)
#return(eval(parse(text = i)))
}
adj= paste(i,"$",i,".Adjusted", sep = "")
print(paste("Merging", adj, sep = " "))
dataset <- merge(dataset, eval(parse(text = adj)))
if(inherits(status, "error"))
cat("Symbol '", i, "' not downloadable!\n", sep = "")
}
names(dataset) = c(symbol_list)
colnames(dataset) = gsub("-", ".", colnames(dataset))
return(dataset)
}
bbsymbols=c("BRK-B", "BF-B")
class(bbsymbols)
BBdata =AdjustedPrice(bbsymbols, begindate, sourc)
View(BBdata)
library(MVFPortfolio)
View(BBdata)
library(MVFPortfolio)
sp486test = sp486data
sp486testM = RRCorCov(sp486test)
s = colnames(SP486Symbols)
class(s)
print(s)
s = colnames(sp486data)
class(s)
print(s)
sp486test = sp486data
RRCorCov = function(adjustedprice_dataset){
aRR = AnnualReturnRisk(adjustedprice_dataset)
assign(paste(deparse(substitute(adjustedprice_dataset)), "RR", sep = "."), aRR)
RRCor = RSTDCorr(adjustedprice_dataset)
assign(paste(deparse(substitute(adjustedprice_dataset)), "RRCor", sep = "."), RRCor)
Cov = CovMatrix(adjustedprice_dataset)
assign(paste(deparse(substitute(adjustedprice_dataset)), "Cov", sep = "."), Cov)
}
sp486testM = RRCorCov(sp486test)
library(MVFPortfolio)
library(MVFPortfolio)
library(MVFPortfolio)
